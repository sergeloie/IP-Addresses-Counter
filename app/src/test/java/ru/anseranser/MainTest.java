package ru.anseranser;
// Generated by CodiumAI

import org.junit.jupiter.api.Test;


import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;


class MainTest {


    // The program reads an input file containing IP addresses and displays the total count of unique IP addresses.
    @Test
    void testCountIPsDisplayTotalCount() {
        String inputFile = "src/test/resources/small";
        boolean displayCount = false;
        boolean displayMega = false;

        long result = IPCounter.countIPs(inputFile, displayCount, displayMega);

        assertEquals(8, result);
    }

    // The program displays the execution time of the IP counting process.
    @Test
    void testCountIPsDisplayExecutionTime() {
        String inputFile = "src/test/resources/ip.txt";
        boolean displayCount = false;
        boolean displayMega = false;

        long startTime = System.currentTimeMillis();
        IPCounter.countIPs(inputFile, displayCount, displayMega);
        long endTime = System.currentTimeMillis();

        // Assert that the execution time is greater than 0
        assertTrue(endTime - startTime > 0);
    }

    // The program can display the line number and IP address of each line in the input file.
    @Test
    void testCountIPsDisplayLineNumberAndIPAddress() {
        String inputFile = "src/test/resources/ip.txt";
        boolean displayCount = true;
        boolean displayMega = false;

        // Redirect System.out to a ByteArrayOutputStream to capture the output
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(outputStream);
        System.setOut(printStream);

        IPCounter.countIPs(inputFile, displayCount, displayMega);

        // Convert the captured output to a string
        String output = outputStream.toString();

        // Assert that the output contains the expected line number and IP address format
        assertTrue(output.matches("line number = \\d+ \\| IP Address = \\d+\\.\\d+\\.\\d+\\.\\d+"
                + System.lineSeparator()));
    }

    // The program throws an IllegalStateException if it cannot read the input file.
    @Test
    void testCountIPsThrowsIllegalStateException() {
        String inputFile = "nonexistent.txt";
        boolean displayCount = false;
        boolean displayMega = false;

        assertThrows(IllegalStateException.class, () -> {
            IPCounter.countIPs(inputFile, displayCount, displayMega);
        });
    }

    // The program throws an IllegalArgumentException if the input file is null or empty.
    @Test
    void testCountIPsThrowsIllegalArgumentException() {
        boolean displayCount = false;
        boolean displayMega = false;

        assertThrows(NullPointerException.class, () -> {
            IPCounter.countIPs(null, displayCount, displayMega);
        });

        assertThrows(IllegalStateException.class, () -> {
            IPCounter.countIPs("", displayCount, displayMega);
        });
    }
}
